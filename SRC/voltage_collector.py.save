from serial import Serial
import re
import threading
import errors as e
import random
import time

class VoltageCollector(threading.Thread): 
        def __init__(self, p_thread_id, p_portname, p_path):
                threading.Thread.__init__(self)
                self.__m_thread_id = p_thread_id
                self.__m_portname = p_portname
                self.__m_path = p_path
                self.__m_serial = Serial(self.__m_path, baudrate=9600, bytesize=8, parity='N', stopbits=1, timeout=None)
                self.__m_bucket = []

        def run(self):
                while True:
                        #number = random.uniform(1,100)
                        #self.__m_bucket.append(number)
                        #print (str(self.__m_thread_id) + " generated: " + str(number))
                        #time.sleep(5)
			try:

                        	raw_data = self.__m_serial.readline(self.__m_serial.inWaiting()).decode('utf-8')[:-2]
                        	if raw_data:
                                	list_of_val = raw_data.split(",")
                                	voltage = float(list_of_val[5])
					print(voltage)
                                	self.__m_bucket.append(voltage)
			except (Exception) as err:
				print("Error:" + str(err))
				#time.sleep(5)
                self.__m_serial.close()

        def getValue(self):
                if len(self.__m_bucket) == 0:
                        raise e.E_NoValue()
                return self.__m_bucket.pop(0)

	#def getName(self):
	#	return self.__m_portname
